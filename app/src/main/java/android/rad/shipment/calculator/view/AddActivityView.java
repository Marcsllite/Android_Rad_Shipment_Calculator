package android.rad.shipment.calculator.view;

import android.content.Context;
import android.os.Bundle;
import android.rad.shipment.calculator.R;
import android.rad.shipment.calculator.base.BaseActivity;
import android.rad.shipment.calculator.database.datasource.ShipmentCalculatorDataSource;
import android.rad.shipment.calculator.presenter.AddPresenter;
import android.rad.shipment.calculator.task.AppTaskExecutor;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;

import androidx.annotation.NonNull;

public class AddActivityView extends BaseActivity<AddPresenter> {
    // Declaring variables
    private View editTxtIsoName;
    private View editTxtInitialActivity;
    private Spinner spinnerA0Units_SI;
    private Spinner spinnerA0Units_Name;
    private View radioGrpShortLong;
    private RadioButton radioBtnShortLived;
    private RadioButton radioBtnLongLived;
    private View radioGrpLungAbs;
    private RadioButton radioBtnSlowLungAbs;
    private RadioButton radioBtnMediumLungAbs;
    private RadioButton radioBtnFastLungAbs;
    private View editTxtMass;
    private Spinner spinnerMassUnits_SI;
    private Spinner spinnerMassUnits_Name;
    private View chckBoxSameMass;
    private Spinner spinnerNature;
    private Spinner spinnerState;
    private Spinner spinnerForm;
    private View chckBoxSameNSF;
    private View btnCancel;
    private View btnAdd;
    private boolean isShortLongEnabled;
    private boolean isLungAbsEnabled;
    
    @NonNull @Override
    protected AddPresenter createPresenter(@NonNull Context context) {
        return new AddPresenter(this,  new AppTaskExecutor(this),new ShipmentCalculatorDataSource(this));
    }

    @Override protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        /* setting the layout to show on the screen (most important)
         *
         * R = Resource Class (generated by the build system)
         * R.layout.activity_main = Resource object that represents the layout
         *     - getting the activity_main.xml file (similar to loading fxml file)
         *
         * takes the reference_layout layout and sets it to be the CurrentView (what is currently displayed on the screen)
         */
        setTitle(R.string.addTitle);
        setContentView(R.layout.add_iso_layout);

        editTxtIsoName = findViewById(R.id.editTxtIsoName);
        editTxtInitialActivity = findViewById(R.id.editTextInitialActivity);
        spinnerA0Units_SI = findViewById(R.id.spinnerA0Units_SI);
        spinnerA0Units_Name = findViewById(R.id.spinnerA0Units_Name);
        radioGrpShortLong = findViewById(R.id.radioGrpShortLong);
        radioBtnShortLived = findViewById(R.id.radioBtnShortLived);
        radioBtnLongLived = findViewById(R.id.radioBtnLongLived);
        radioGrpLungAbs = findViewById(R.id.radioGrpLungAbs);
        radioBtnSlowLungAbs = findViewById(R.id.radioBtnSlowLungAbs);
        radioBtnMediumLungAbs = findViewById(R.id.radioBtnMediumLungAbs);
        radioBtnFastLungAbs = findViewById(R.id.radioBtnFastLungAbs);
        editTxtMass = findViewById(R.id.editTxtMass);
        spinnerMassUnits_SI = findViewById(R.id.spinnerMassUnits_SI);
        spinnerMassUnits_Name = findViewById(R.id.spinnerMassUnits_Name);
        chckBoxSameMass = findViewById(R.id.chckBoxSameMass);
        spinnerNature = findViewById(R.id.spinnerNature);
        spinnerState = findViewById(R.id.spinnerState);
        spinnerForm = findViewById(R.id.spinnerForm);
        chckBoxSameNSF = findViewById(R.id.chckBoxSameNSF);
        btnCancel = findViewById(R.id.btnCancel);
        btnAdd = findViewById(R.id.btnAdd);
        
        ArrayAdapter<CharSequence> UnitsAdapter_SI = ArrayAdapter.createFromResource(this, R.array.Units_SI, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> A0Adapter_Name = ArrayAdapter.createFromResource(this, R.array.AOUnits_Name, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> MassAdapter_Name = ArrayAdapter.createFromResource(this, R.array.MassUnits_Name, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> NatureAdapter = ArrayAdapter.createFromResource(this, R.array.NatureUnits, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> StateAdapter = ArrayAdapter.createFromResource(this, R.array.StateUnits, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> FormAdapter = ArrayAdapter.createFromResource(this, R.array.FormUnits, android.R.layout.simple_spinner_item);

        UnitsAdapter_SI.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        A0Adapter_Name.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        MassAdapter_Name.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        NatureAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        StateAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        FormAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        spinnerA0Units_SI.setAdapter(UnitsAdapter_SI);
        spinnerA0Units_Name.setAdapter(A0Adapter_Name);
        spinnerMassUnits_SI.setAdapter(UnitsAdapter_SI);
        spinnerMassUnits_Name.setAdapter(MassAdapter_Name);
        spinnerNature.setAdapter(NatureAdapter);
        spinnerState.setAdapter(StateAdapter);
        spinnerForm.setAdapter(FormAdapter);

        spinnerA0Units_SI.setSelection(getResources().getInteger(R.integer.microIndex));
        spinnerA0Units_Name.setSelection(getResources().getInteger(R.integer.curieIndex));
        spinnerMassUnits_SI.setSelection(getResources().getInteger(R.integer.baseIndex));
        spinnerMassUnits_Name.setSelection(getResources().getInteger(R.integer.gramsIndex));
        spinnerNature.setSelection(getResources().getInteger(R.integer.regularIndex));
        spinnerState.setSelection(getResources().getInteger(R.integer.solidIndex));
        spinnerForm.setSelection(getResources().getInteger(R.integer.normalIndex));

        OnSpinnerItemSelected onSpinnerItemSelected = new OnSpinnerItemSelected();
        OnA0TextChanged onA0TextChanged = new OnA0TextChanged();
        OnAddTextChanged onAddTextChanged = new OnAddTextChanged();
        OnAddButtonsClicked onAddButtonsClicked = new OnAddButtonsClicked();

        spinnerA0Units_SI.setOnItemSelectedListener(onSpinnerItemSelected);
        spinnerMassUnits_Name.setOnItemSelectedListener(onSpinnerItemSelected);
        spinnerA0Units_SI.setOnItemSelectedListener(onSpinnerItemSelected);
        spinnerA0Units_Name.setOnItemSelectedListener(onSpinnerItemSelected);

        ((EditText) editTxtIsoName).addTextChangedListener(onAddTextChanged);
        ((EditText) editTxtInitialActivity).addTextChangedListener(onA0TextChanged);

        ((CheckBox) chckBoxSameNSF).setChecked(mPresenter.initChckBoxSameNSF());

        chckBoxSameMass.setOnClickListener(onAddButtonsClicked);
        chckBoxSameNSF.setOnClickListener(onAddButtonsClicked);
        btnCancel.setOnClickListener(onAddButtonsClicked);
        btnAdd.setOnClickListener(onAddButtonsClicked);

        enableShortLong(false);
        enableLungAbs(false);
    }

    public void enableShortLong(boolean isEnabled){
        isShortLongEnabled = isEnabled;

        if(!isEnabled) {
            radioGrpShortLong.setVisibility(View.GONE);
            findViewById(R.id.linearLayoutAddInfoTop).setVisibility(View.GONE);
        }
        else {
            radioGrpShortLong.setVisibility(View.VISIBLE);
            findViewById(R.id.linearLayoutAddInfoTop).setVisibility(View.VISIBLE);
        }
    }

    public void enableLungAbs(boolean isEnabled){
        isLungAbsEnabled = isEnabled;

        if(!isEnabled) {
            radioGrpLungAbs.setVisibility(View.GONE);
            findViewById(R.id.linearLayoutAddInfoTop).setVisibility(View.GONE);
        }
        else {
            radioGrpLungAbs.setVisibility(View.VISIBLE);
            findViewById(R.id.linearLayoutAddInfoTop).setVisibility(View.VISIBLE);
        }
    }

    public void setError(EditText editTxt, String error) {
        if(editTxt.equals(editTxtIsoName)) {
            ((EditText) editTxtIsoName).setError(error);
        } else if (editTxt.equals(editTxtInitialActivity)) {
            ((EditText) editTxtInitialActivity).setError(error);
        } else if (editTxt.equals(editTxtMass)) {
            ((EditText) editTxtMass).setError(error);
        }
    }

    public EditText getEditTxtIsoName() { return ((EditText) editTxtIsoName);}

    public EditText getEditTxtA0() { return ((EditText) editTxtInitialActivity);}

    public EditText getEditTxtMass() { return ((EditText) editTxtMass);}

    public CheckBox getChckBoxSameMass() { return ((CheckBox) chckBoxSameMass);}

    public Spinner getSpinnerMassUnits_SI() { return spinnerMassUnits_SI;}

    public Spinner getSpinnerMassUnits_Name() { return spinnerMassUnits_Name;}

    public Spinner getSpinnerNature() { return spinnerNature;}

    public Spinner getSpinnerState() { return spinnerState;}

    public Spinner getSpinnerForm() { return spinnerForm;}

    public CheckBox getChckBoxSameNSF() { return ((CheckBox) chckBoxSameNSF);}
    
    public String getIsoName() {
        if(isShortLongEnabled) {
            switch (((RadioGroup) radioGrpShortLong).getCheckedRadioButtonId()) {
                case R.id.radioBtnShortLived:
                    return ((EditText) editTxtIsoName).getText().toString() + getString(R.string.isoShortTxt);
                case R.id.radioBtnLongLived:
                    return ((EditText) editTxtIsoName).getText().toString() + getString(R.string.isoLongTxt);
            }
        } else if (isLungAbsEnabled) {
            switch (((RadioGroup) radioGrpLungAbs).getCheckedRadioButtonId()) {
                case R.id.radioBtnSlowLungAbs:
                    return ((EditText) editTxtIsoName).getText().toString() + "s";
                case R.id.radioBtnMediumLungAbs:
                    return ((EditText) editTxtIsoName).getText().toString() + "m";
                case R.id.radioBtnFastLungAbs:
                    return ((EditText) editTxtIsoName).getText().toString() + "f";
            }
        } else { return ((EditText) editTxtIsoName).getText().toString(); }
        return null;
    }

    public float getInitialActivity() { return Float.parseFloat(((EditText) editTxtInitialActivity).getText().toString()); }

    public float getMass() {
        return Float.parseFloat(((EditText) editTxtMass).getText().toString());
    }

    public String getNature() { return  spinnerNature.getSelectedItem().toString(); }

    public String getState() { return  spinnerState.getSelectedItem().toString(); }

    public String getForm() { return  spinnerForm.getSelectedItem().toString(); }

    private class OnSpinnerItemSelected implements AdapterView.OnItemSelectedListener {
        @Override public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
            switch (view.getId()) {
                case R.id.spinnerA0Units_SI:
                    mPresenter.onA0UnitSISelected(i);
                    break;
                case R.id.spinnerA0Units_Name:
                    mPresenter.onA0UnitNameSelected(i);
                    break;
                case R.id.spinnerMassUnits_SI:
                    mPresenter.onMassUnitSISelected(i);
                    break;
                case R.id.spinnerMassUnits_Name:
                    mPresenter.onMassUnitNameSelected(i);
                    break;
                case R.id.spinnerNature:
                    mPresenter.onNatureSelected(i);
                    break;
                case R.id.spinnerState:
                    mPresenter.onStateSelected(i);
                    break;
                case R.id.spinnerForm:
                    mPresenter.onFormSelected(i);
                    break;
            }
        }

        @Override
        public void onNothingSelected(AdapterView<?> adapterView) {
            
        }
    }

    private class OnAddTextChanged implements TextWatcher {
        @Override public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) { }

        @Override public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) { }

        @Override public void afterTextChanged(Editable editable) { mPresenter.onAddTextChanged(editable); }
    }

    private class OnA0TextChanged implements TextWatcher {
        @Override public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) { }

        @Override public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) { }

        @Override public void afterTextChanged(Editable editable) { mPresenter.onA0TextChanged(editable); }
    }

    private class OnAddButtonsClicked implements View.OnClickListener {
        @Override public void onClick(final View view) {
            switch (view.getId()) {
                case R.id.chckBoxSameMass:
                    mPresenter.onChckBoxSameMassClicked();
                    break;
                case R.id.chckBoxSameNSF:
                    mPresenter.onChckBoxSameNSFClicked();
                    break;
                case R.id.btnCancel:
                    mPresenter.onBtnCancelClicked();
                    break;
                case R.id.btnAdd:
                    mPresenter.onBtnAddClicked();
                    break;
            }
        }
    }
}
