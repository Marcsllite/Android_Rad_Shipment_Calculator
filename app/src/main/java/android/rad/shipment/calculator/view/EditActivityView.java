package android.rad.shipment.calculator.view;

import android.content.Context;
import android.os.Bundle;
import android.rad.shipment.calculator.R;
import android.rad.shipment.calculator.base.BaseActivity;
import android.rad.shipment.calculator.database.datasource.ShipmentCalculatorDataSource;
import android.rad.shipment.calculator.presenter.EditPresenter;
import android.rad.shipment.calculator.task.AppTaskExecutor;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.RadioGroup;
import android.widget.Spinner;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import androidx.annotation.NonNull;

public class EditActivityView extends BaseActivity<EditPresenter> {
    // Declaring variables
    private View editTxtIsoName;
    private View editTxtInitialActivity;
    private Spinner spinnerA0Units_SI;
    private Spinner spinnerA0Units_Name;
    private View radioGrpShortLong;
    private View radioGrpLungAbs;
    private View editTxtMass;
    private Spinner spinnerMassUnits_SI;
    private Spinner spinnerMassUnits_Name;
    private View chckBoxSameMass;
    private Spinner spinnerNature;
    private Spinner spinnerState;
    private Spinner spinnerForm;
    private View chckBoxSameNSF;
    private View btnCancel;
    private View btnDelete;
    private View btnEdit;
    private int _index;

    @NonNull @Override
    protected EditPresenter createPresenter(@NonNull Context context) {
        return new EditPresenter(this,  new AppTaskExecutor(this),new ShipmentCalculatorDataSource(this));
    }

    @Override protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        /* setting the layout to show on the screen (most important)
         *
         * R = Resource Class (generated by the build system)
         * R.layout.activity_main = Resource object that represents the layout
         *     - getting the activity_main.xml file (similar to loading fxml file)
         *
         * takes the reference_layout layout and sets it to be the CurrentView (what is currently displayed on the screen)
         */
        setTitle(R.string.editTitle);
        setContentView(R.layout.edit_iso_layout);

        _index = getIntent().getIntExtra("index", getResources().getInteger(R.integer.defaultInt));
        
        editTxtIsoName = findViewById(R.id.editTxtIsoName);
        editTxtInitialActivity = findViewById(R.id.editTextInitialActivity);
        spinnerA0Units_SI = findViewById(R.id.spinnerA0Units_SI);
        spinnerA0Units_Name = findViewById(R.id.spinnerA0Units_Name);
        radioGrpShortLong = findViewById(R.id.radioGrpShortLong);
        radioGrpLungAbs = findViewById(R.id.radioGrpLungAbs);
        editTxtMass = findViewById(R.id.editTxtMass);
        spinnerMassUnits_SI = findViewById(R.id.spinnerMassUnits_SI);
        spinnerMassUnits_Name = findViewById(R.id.spinnerMassUnits_Name);
        chckBoxSameMass = findViewById(R.id.chckBoxSameMass);
        spinnerNature = findViewById(R.id.spinnerNature);
        spinnerState = findViewById(R.id.spinnerState);
        spinnerForm = findViewById(R.id.spinnerForm);
        chckBoxSameNSF = findViewById(R.id.chckBoxSameNSF);
        btnCancel = findViewById(R.id.btnCancel);
        btnDelete = findViewById(R.id.btnDelete);
        btnEdit = findViewById(R.id.btnEdit);

        ArrayAdapter<CharSequence> UnitsAdapter_SI = ArrayAdapter.createFromResource(this, R.array.Units_SI, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> A0Adapter_Name = ArrayAdapter.createFromResource(this, R.array.AOUnits_Name, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> MassAdapter_Name = ArrayAdapter.createFromResource(this, R.array.MassUnits_Name, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> NatureAdapter = ArrayAdapter.createFromResource(this, R.array.NatureUnits, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> StateAdapter = ArrayAdapter.createFromResource(this, R.array.StateUnits, android.R.layout.simple_spinner_item);
        ArrayAdapter<CharSequence> FormAdapter = ArrayAdapter.createFromResource(this, R.array.FormUnits, android.R.layout.simple_spinner_item);

        spinnerA0Units_SI.setAdapter(UnitsAdapter_SI);
        spinnerA0Units_Name.setAdapter(A0Adapter_Name);
        spinnerMassUnits_SI.setAdapter(UnitsAdapter_SI);
        spinnerMassUnits_Name.setAdapter(MassAdapter_Name);
        spinnerNature.setAdapter(NatureAdapter);
        spinnerState.setAdapter(StateAdapter);
        spinnerForm.setAdapter(FormAdapter);

        OnEditTextChanged onEditTextChanged = new OnEditTextChanged();
        OnEditButtonsClicked onEditButtonsClicked = new OnEditButtonsClicked();

        ((EditText) editTxtIsoName).addTextChangedListener(onEditTextChanged);

        chckBoxSameMass.setOnClickListener(onEditButtonsClicked);
        chckBoxSameNSF.setOnClickListener(onEditButtonsClicked);
        btnCancel.setOnClickListener(onEditButtonsClicked);
        btnDelete.setOnClickListener(onEditButtonsClicked);
        btnEdit.setOnClickListener(onEditButtonsClicked);
    }

    public int getIndex() { return _index; }
    
    public String getIsoName() {
        if(radioGrpShortLong.isEnabled()) {
            switch (((RadioGroup) radioGrpShortLong).getCheckedRadioButtonId()) {
                case R.id.radioBtnShortLived:
                    return ((EditText) editTxtIsoName).getText().toString() + getString(R.string.isoShortTxt);
                case R.id.radioBtnLongLived:
                    return ((EditText) editTxtIsoName).getText().toString() + getString(R.string.isoLongTxt);
            }
        } else if (radioGrpLungAbs.isEnabled()) {
            switch (((RadioGroup) radioGrpLungAbs).getCheckedRadioButtonId()) {
                case R.id.radioBtnSlowLungAbs:
                    return ((EditText) editTxtIsoName).getText().toString() + "s";
                case R.id.radioBtnMediumLungAbs:
                    return ((EditText) editTxtIsoName).getText().toString() + "m";
                case R.id.radioBtnFastLungAbs:
                    return ((EditText) editTxtIsoName).getText().toString() + "f";
            }
        } else { return ((EditText) editTxtIsoName).getText().toString(); }
        return null;
    }

    public float getInitialActivity() { return Float.parseFloat(((EditText) editTxtInitialActivity).getText().toString()); }

    private String getSIUnit(Spinner spinner) {
        String ret = "";
        Pattern pattern = Pattern.compile(".*\\((.*)\\)");
        if(spinner.equals(spinnerA0Units_SI)){
            ret = spinnerA0Units_SI.getSelectedItem().toString();
            Matcher matcher = pattern.matcher(ret);
            if(matcher.find()) ret = matcher.group(1);
        } else if (spinner.equals(spinnerMassUnits_SI)) {
            ret = spinnerMassUnits_SI.getSelectedItem().toString();
            Matcher matcher = pattern.matcher(ret);
            if(matcher.find()) ret = matcher.group(1);
        }
        return (getString(R.string.baseSi).equals(ret))? "" : ret;
    }

    public String getA0Unit() {
        Pattern pattern = Pattern.compile(".*\\((.*)\\)");

        String ret = spinnerA0Units_Name.getSelectedItem().toString();
        Matcher matcher = pattern.matcher(ret);
        if(matcher.find()) ret = matcher.group(1);

        return getSIUnit(spinnerA0Units_SI) + ret;
    }

    public String getMassUnit() {
        return getSIUnit(spinnerMassUnits_SI) + spinnerMassUnits_Name.getSelectedItem().toString();
    }

    public float getMass() {
        return Float.parseFloat(((EditText) editTxtMass).getText().toString());
    }

    public String getNature() { return  spinnerNature.getSelectedItem().toString(); }

    public String getState() { return  spinnerState.getSelectedItem().toString(); }

    public String getForm() { return  spinnerForm.getSelectedItem().toString(); }

    private class OnEditTextChanged implements TextWatcher {
        @Override public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) { }

        @Override public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) { }

        @Override public void afterTextChanged(Editable editable) { mPresenter.onEditTextChanged(editable); }
    }

    private class OnEditButtonsClicked implements View.OnClickListener {
        @Override public void onClick(final View view) {
            switch (view.getId()) {
                case R.id.chckBoxSameMass:
                    mPresenter.onChckBoxSameMassClicked();
                    break;
                case R.id.chckBoxSameNSF:
                    mPresenter.onChckBoxSameNSFClicked();
                    break;
                case R.id.btnCancel:
                    mPresenter.onBtnCancelClicked();
                    break;
                case R.id.btnDelete:
                    mPresenter.onBtnDeleteClicked();
                    break;
                case R.id.btnEdit:
                    mPresenter.onBtnEditClicked();
                    break;
            }
        }
    }
}
